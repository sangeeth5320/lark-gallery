(function(){

/////////////////////////////////////////////////////////////////////////
//                                                                     //
// client/lib/counter/waypoints.js                                     //
//                                                                     //
/////////////////////////////////////////////////////////////////////////
                                                                       //
// Generated by CoffeeScript 1.6.2                                     //
/*                                                                     //
jQuery Waypoints - v2.0.4                                              //
Copyright (c) 2011-2014 Caleb Troughton                                //
Dual licensed under the MIT license and GPL license.                   //
https://github.com/imakewebthings/jquery-waypoints/blob/master/licenses.txt
*/                                                                     //
                                                                       //
(function () {                                                         // 10
  var __indexOf = [].indexOf || function (item) {                      // 11
    for (var i = 0, l = this.length; i < l; i++) {                     // 11
      if (i in this && this[i] === item) return i;                     // 11
    }return -1;                                                        //
  },                                                                   //
      __slice = [].slice;                                              //
                                                                       //
  (function (root, factory) {                                          // 14
    if (typeof define === 'function' && define.amd) {                  // 15
      return define('waypoints', ['jquery'], function ($) {            // 16
        return factory($, root);                                       // 17
      });                                                              //
    } else {                                                           //
      return factory(root.jQuery, root);                               // 20
    }                                                                  //
  })(this, function ($, window) {                                      //
    var $w, Context, Waypoint, allWaypoints, contextCounter, contextKey, contexts, isTouch, jQMethods, methods, resizeEvent, scrollEvent, waypointCounter, waypointKey, wp, wps;
                                                                       //
    $w = $(window);                                                    // 25
    isTouch = __indexOf.call(window, 'ontouchstart') >= 0;             // 26
    allWaypoints = {                                                   // 27
      horizontal: {},                                                  // 28
      vertical: {}                                                     // 29
    };                                                                 //
    contextCounter = 1;                                                // 31
    contexts = {};                                                     // 32
    contextKey = 'waypoints-context-id';                               // 33
    resizeEvent = 'resize.waypoints';                                  // 34
    scrollEvent = 'scroll.waypoints';                                  // 35
    waypointCounter = 1;                                               // 36
    waypointKey = 'waypoints-waypoint-ids';                            // 37
    wp = 'waypoint';                                                   // 38
    wps = 'waypoints';                                                 // 39
    Context = (function () {                                           // 40
      function Context($element) {                                     // 41
        var _this = this;                                              // 42
                                                                       //
        this.$element = $element;                                      // 44
        this.element = $element[0];                                    // 45
        this.didResize = false;                                        // 46
        this.didScroll = false;                                        // 47
        this.id = 'context' + contextCounter++;                        // 48
        this.oldScroll = {                                             // 49
          x: $element.scrollLeft(),                                    // 50
          y: $element.scrollTop()                                      // 51
        };                                                             //
        this.waypoints = {                                             // 53
          horizontal: {},                                              // 54
          vertical: {}                                                 // 55
        };                                                             //
        this.element[contextKey] = this.id;                            // 57
        contexts[this.id] = this;                                      // 58
        $element.bind(scrollEvent, function () {                       // 59
          var scrollHandler;                                           // 60
                                                                       //
          if (!(_this.didScroll || isTouch)) {                         // 62
            _this.didScroll = true;                                    // 63
            scrollHandler = function () {                              // 64
              _this.doScroll();                                        // 65
              return _this.didScroll = false;                          // 66
            };                                                         //
            return window.setTimeout(scrollHandler, $[wps].settings.scrollThrottle);
          }                                                            //
        });                                                            //
        $element.bind(resizeEvent, function () {                       // 71
          var resizeHandler;                                           // 72
                                                                       //
          if (!_this.didResize) {                                      // 74
            _this.didResize = true;                                    // 75
            resizeHandler = function () {                              // 76
              $[wps]('refresh');                                       // 77
              return _this.didResize = false;                          // 78
            };                                                         //
            return window.setTimeout(resizeHandler, $[wps].settings.resizeThrottle);
          }                                                            //
        });                                                            //
      }                                                                //
                                                                       //
      Context.prototype.doScroll = function () {                       // 85
        var axes,                                                      // 86
            _this = this;                                              //
                                                                       //
        axes = {                                                       // 89
          horizontal: {                                                // 90
            newScroll: this.$element.scrollLeft(),                     // 91
            oldScroll: this.oldScroll.x,                               // 92
            forward: 'right',                                          // 93
            backward: 'left'                                           // 94
          },                                                           //
          vertical: {                                                  // 96
            newScroll: this.$element.scrollTop(),                      // 97
            oldScroll: this.oldScroll.y,                               // 98
            forward: 'down',                                           // 99
            backward: 'up'                                             // 100
          }                                                            //
        };                                                             //
        if (isTouch && (!axes.vertical.oldScroll || !axes.vertical.newScroll)) {
          $[wps]('refresh');                                           // 104
        }                                                              //
        $.each(axes, function (aKey, axis) {                           // 106
          var direction, isForward, triggered;                         // 107
                                                                       //
          triggered = [];                                              // 109
          isForward = axis.newScroll > axis.oldScroll;                 // 110
          direction = isForward ? axis.forward : axis.backward;        // 111
          $.each(_this.waypoints[aKey], function (wKey, waypoint) {    // 112
            var _ref, _ref1;                                           // 113
                                                                       //
            if (axis.oldScroll < (_ref = waypoint.offset) && _ref <= axis.newScroll) {
              return triggered.push(waypoint);                         // 116
            } else if (axis.newScroll < (_ref1 = waypoint.offset) && _ref1 <= axis.oldScroll) {
              return triggered.push(waypoint);                         // 118
            }                                                          //
          });                                                          //
          triggered.sort(function (a, b) {                             // 121
            return a.offset - b.offset;                                // 122
          });                                                          //
          if (!isForward) {                                            // 124
            triggered.reverse();                                       // 125
          }                                                            //
          return $.each(triggered, function (i, waypoint) {            // 127
            if (waypoint.options.continuous || i === triggered.length - 1) {
              return waypoint.trigger([direction]);                    // 129
            }                                                          //
          });                                                          //
        });                                                            //
        return this.oldScroll = {                                      // 133
          x: axes.horizontal.newScroll,                                // 134
          y: axes.vertical.newScroll                                   // 135
        };                                                             //
      };                                                               //
                                                                       //
      Context.prototype.refresh = function () {                        // 139
        var axes,                                                      // 140
            cOffset,                                                   //
            isWin,                                                     //
            _this = this;                                              //
                                                                       //
        isWin = $.isWindow(this.element);                              // 143
        cOffset = this.$element.offset();                              // 144
        this.doScroll();                                               // 145
        axes = {                                                       // 146
          horizontal: {                                                // 147
            contextOffset: isWin ? 0 : cOffset.left,                   // 148
            contextScroll: isWin ? 0 : this.oldScroll.x,               // 149
            contextDimension: this.$element.width(),                   // 150
            oldScroll: this.oldScroll.x,                               // 151
            forward: 'right',                                          // 152
            backward: 'left',                                          // 153
            offsetProp: 'left'                                         // 154
          },                                                           //
          vertical: {                                                  // 156
            contextOffset: isWin ? 0 : cOffset.top,                    // 157
            contextScroll: isWin ? 0 : this.oldScroll.y,               // 158
            contextDimension: isWin ? $[wps]('viewportHeight') : this.$element.height(),
            oldScroll: this.oldScroll.y,                               // 160
            forward: 'down',                                           // 161
            backward: 'up',                                            // 162
            offsetProp: 'top'                                          // 163
          }                                                            //
        };                                                             //
        return $.each(axes, function (aKey, axis) {                    // 166
          return $.each(_this.waypoints[aKey], function (i, waypoint) {
            var adjustment, elementOffset, oldOffset, _ref, _ref1;     // 168
                                                                       //
            adjustment = waypoint.options.offset;                      // 170
            oldOffset = waypoint.offset;                               // 171
            elementOffset = $.isWindow(waypoint.element) ? 0 : waypoint.$element.offset()[axis.offsetProp];
            if ($.isFunction(adjustment)) {                            // 173
              adjustment = adjustment.apply(waypoint.element);         // 174
            } else if (typeof adjustment === 'string') {               //
              adjustment = parseFloat(adjustment);                     // 176
              if (waypoint.options.offset.indexOf('%') > -1) {         // 177
                adjustment = Math.ceil(axis.contextDimension * adjustment / 100);
              }                                                        //
            }                                                          //
            waypoint.offset = elementOffset - axis.contextOffset + axis.contextScroll - adjustment;
            if (waypoint.options.onlyOnScroll && oldOffset != null || !waypoint.enabled) {
              return;                                                  // 183
            }                                                          //
            if (oldOffset !== null && (oldOffset < (_ref = axis.oldScroll) && _ref <= waypoint.offset)) {
              return waypoint.trigger([axis.backward]);                // 186
            } else if (oldOffset !== null && (oldOffset > (_ref1 = axis.oldScroll) && _ref1 >= waypoint.offset)) {
              return waypoint.trigger([axis.forward]);                 // 188
            } else if (oldOffset === null && axis.oldScroll >= waypoint.offset) {
              return waypoint.trigger([axis.forward]);                 // 190
            }                                                          //
          });                                                          //
        });                                                            //
      };                                                               //
                                                                       //
      Context.prototype.checkEmpty = function () {                     // 196
        if ($.isEmptyObject(this.waypoints.horizontal) && $.isEmptyObject(this.waypoints.vertical)) {
          this.$element.unbind([resizeEvent, scrollEvent].join(' '));  // 198
          return delete contexts[this.id];                             // 199
        }                                                              //
      };                                                               //
                                                                       //
      return Context;                                                  // 203
    })();                                                              //
    Waypoint = (function () {                                          // 206
      function Waypoint($element, context, options) {                  // 207
        var idList, _ref;                                              // 208
                                                                       //
        options = $.extend({}, $.fn[wp].defaults, options);            // 210
        if (options.offset === 'bottom-in-view') {                     // 211
          options.offset = function () {                               // 212
            var contextHeight;                                         // 213
                                                                       //
            contextHeight = $[wps]('viewportHeight');                  // 215
            if (!$.isWindow(context.element)) {                        // 216
              contextHeight = context.$element.height();               // 217
            }                                                          //
            return contextHeight - $(this).outerHeight();              // 219
          };                                                           //
        }                                                              //
        this.$element = $element;                                      // 222
        this.element = $element[0];                                    // 223
        this.axis = options.horizontal ? 'horizontal' : 'vertical';    // 224
        this.callback = options.handler;                               // 225
        this.context = context;                                        // 226
        this.enabled = options.enabled;                                // 227
        this.id = 'waypoints' + waypointCounter++;                     // 228
        this.offset = null;                                            // 229
        this.options = options;                                        // 230
        context.waypoints[this.axis][this.id] = this;                  // 231
        allWaypoints[this.axis][this.id] = this;                       // 232
        idList = (_ref = this.element[waypointKey]) != null ? _ref : [];
        idList.push(this.id);                                          // 234
        this.element[waypointKey] = idList;                            // 235
      }                                                                //
                                                                       //
      Waypoint.prototype.trigger = function (args) {                   // 238
        if (!this.enabled) {                                           // 239
          return;                                                      // 240
        }                                                              //
        if (this.callback != null) {                                   // 242
          this.callback.apply(this.element, args);                     // 243
        }                                                              //
        if (this.options.triggerOnce) {                                // 245
          return this.destroy();                                       // 246
        }                                                              //
      };                                                               //
                                                                       //
      Waypoint.prototype.disable = function () {                       // 250
        return this.enabled = false;                                   // 251
      };                                                               //
                                                                       //
      Waypoint.prototype.enable = function () {                        // 254
        this.context.refresh();                                        // 255
        return this.enabled = true;                                    // 256
      };                                                               //
                                                                       //
      Waypoint.prototype.destroy = function () {                       // 259
        delete allWaypoints[this.axis][this.id];                       // 260
        delete this.context.waypoints[this.axis][this.id];             // 261
        return this.context.checkEmpty();                              // 262
      };                                                               //
                                                                       //
      Waypoint.getWaypointsByElement = function (element) {            // 265
        var all, ids;                                                  // 266
                                                                       //
        ids = element[waypointKey];                                    // 268
        if (!ids) {                                                    // 269
          return [];                                                   // 270
        }                                                              //
        all = $.extend({}, allWaypoints.horizontal, allWaypoints.vertical);
        return $.map(ids, function (id) {                              // 273
          return all[id];                                              // 274
        });                                                            //
      };                                                               //
                                                                       //
      return Waypoint;                                                 // 278
    })();                                                              //
    methods = {                                                        // 281
      init: function (f, options) {                                    // 282
        var _ref;                                                      // 283
                                                                       //
        if (options == null) {                                         // 285
          options = {};                                                // 286
        }                                                              //
        if ((_ref = options.handler) == null) {                        // 288
          options.handler = f;                                         // 289
        }                                                              //
        this.each(function () {                                        // 291
          var $this, context, contextElement, _ref1;                   // 292
                                                                       //
          $this = $(this);                                             // 294
          contextElement = (_ref1 = options.context) != null ? _ref1 : $.fn[wp].defaults.context;
          if (!$.isWindow(contextElement)) {                           // 296
            contextElement = $this.closest(contextElement);            // 297
          }                                                            //
          contextElement = $(contextElement);                          // 299
          context = contexts[contextElement[0][contextKey]];           // 300
          if (!context) {                                              // 301
            context = new Context(contextElement);                     // 302
          }                                                            //
          return new Waypoint($this, context, options);                // 304
        });                                                            //
        $[wps]('refresh');                                             // 306
        return this;                                                   // 307
      },                                                               //
      disable: function () {                                           // 309
        return methods._invoke.call(this, 'disable');                  // 310
      },                                                               //
      enable: function () {                                            // 312
        return methods._invoke.call(this, 'enable');                   // 313
      },                                                               //
      destroy: function () {                                           // 315
        return methods._invoke.call(this, 'destroy');                  // 316
      },                                                               //
      prev: function (axis, selector) {                                // 318
        return methods._traverse.call(this, axis, selector, function (stack, index, waypoints) {
          if (index > 0) {                                             // 320
            return stack.push(waypoints[index - 1]);                   // 321
          }                                                            //
        });                                                            //
      },                                                               //
      next: function (axis, selector) {                                // 325
        return methods._traverse.call(this, axis, selector, function (stack, index, waypoints) {
          if (index < waypoints.length - 1) {                          // 327
            return stack.push(waypoints[index + 1]);                   // 328
          }                                                            //
        });                                                            //
      },                                                               //
      _traverse: function (axis, selector, push) {                     // 332
        var stack, waypoints;                                          // 333
                                                                       //
        if (axis == null) {                                            // 335
          axis = 'vertical';                                           // 336
        }                                                              //
        if (selector == null) {                                        // 338
          selector = window;                                           // 339
        }                                                              //
        waypoints = jQMethods.aggregate(selector);                     // 341
        stack = [];                                                    // 342
        this.each(function () {                                        // 343
          var index;                                                   // 344
                                                                       //
          index = $.inArray(this, waypoints[axis]);                    // 346
          return push(stack, index, waypoints[axis]);                  // 347
        });                                                            //
        return this.pushStack(stack);                                  // 349
      },                                                               //
      _invoke: function (method) {                                     // 351
        this.each(function () {                                        // 352
          var waypoints;                                               // 353
                                                                       //
          waypoints = Waypoint.getWaypointsByElement(this);            // 355
          return $.each(waypoints, function (i, waypoint) {            // 356
            waypoint[method]();                                        // 357
            return true;                                               // 358
          });                                                          //
        });                                                            //
        return this;                                                   // 361
      }                                                                //
    };                                                                 //
    $.fn[wp] = function () {                                           // 364
      var args, method;                                                // 365
                                                                       //
      method = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      if (methods[method]) {                                           // 368
        return methods[method].apply(this, args);                      // 369
      } else if ($.isFunction(method)) {                               //
        return methods.init.apply(this, arguments);                    // 371
      } else if ($.isPlainObject(method)) {                            //
        return methods.init.apply(this, [null, method]);               // 373
      } else if (!method) {                                            //
        return $.error("jQuery Waypoints needs a callback function or handler option.");
      } else {                                                         //
        return $.error("The " + method + " method does not exist in jQuery Waypoints.");
      }                                                                //
    };                                                                 //
    $.fn[wp].defaults = {                                              // 380
      context: window,                                                 // 381
      continuous: true,                                                // 382
      enabled: true,                                                   // 383
      horizontal: false,                                               // 384
      offset: 0,                                                       // 385
      triggerOnce: false                                               // 386
    };                                                                 //
    jQMethods = {                                                      // 388
      refresh: function () {                                           // 389
        return $.each(contexts, function (i, context) {                // 390
          return context.refresh();                                    // 391
        });                                                            //
      },                                                               //
      viewportHeight: function () {                                    // 394
        var _ref;                                                      // 395
                                                                       //
        return (_ref = window.innerHeight) != null ? _ref : $w.height();
      },                                                               //
      aggregate: function (contextSelector) {                          // 399
        var collection, waypoints, _ref;                               // 400
                                                                       //
        collection = allWaypoints;                                     // 402
        if (contextSelector) {                                         // 403
          collection = (_ref = contexts[$(contextSelector)[0][contextKey]]) != null ? _ref.waypoints : void 0;
        }                                                              //
        if (!collection) {                                             // 406
          return [];                                                   // 407
        }                                                              //
        waypoints = {                                                  // 409
          horizontal: [],                                              // 410
          vertical: []                                                 // 411
        };                                                             //
        $.each(waypoints, function (axis, arr) {                       // 413
          $.each(collection[axis], function (key, waypoint) {          // 414
            return arr.push(waypoint);                                 // 415
          });                                                          //
          arr.sort(function (a, b) {                                   // 417
            return a.offset - b.offset;                                // 418
          });                                                          //
          waypoints[axis] = $.map(arr, function (waypoint) {           // 420
            return waypoint.element;                                   // 421
          });                                                          //
          return waypoints[axis] = $.unique(waypoints[axis]);          // 423
        });                                                            //
        return waypoints;                                              // 425
      },                                                               //
      above: function (contextSelector) {                              // 427
        if (contextSelector == null) {                                 // 428
          contextSelector = window;                                    // 429
        }                                                              //
        return jQMethods._filter(contextSelector, 'vertical', function (context, waypoint) {
          return waypoint.offset <= context.oldScroll.y;               // 432
        });                                                            //
      },                                                               //
      below: function (contextSelector) {                              // 435
        if (contextSelector == null) {                                 // 436
          contextSelector = window;                                    // 437
        }                                                              //
        return jQMethods._filter(contextSelector, 'vertical', function (context, waypoint) {
          return waypoint.offset > context.oldScroll.y;                // 440
        });                                                            //
      },                                                               //
      left: function (contextSelector) {                               // 443
        if (contextSelector == null) {                                 // 444
          contextSelector = window;                                    // 445
        }                                                              //
        return jQMethods._filter(contextSelector, 'horizontal', function (context, waypoint) {
          return waypoint.offset <= context.oldScroll.x;               // 448
        });                                                            //
      },                                                               //
      right: function (contextSelector) {                              // 451
        if (contextSelector == null) {                                 // 452
          contextSelector = window;                                    // 453
        }                                                              //
        return jQMethods._filter(contextSelector, 'horizontal', function (context, waypoint) {
          return waypoint.offset > context.oldScroll.x;                // 456
        });                                                            //
      },                                                               //
      enable: function () {                                            // 459
        return jQMethods._invoke('enable');                            // 460
      },                                                               //
      disable: function () {                                           // 462
        return jQMethods._invoke('disable');                           // 463
      },                                                               //
      destroy: function () {                                           // 465
        return jQMethods._invoke('destroy');                           // 466
      },                                                               //
      extendFn: function (methodName, f) {                             // 468
        return methods[methodName] = f;                                // 469
      },                                                               //
      _invoke: function (method) {                                     // 471
        var waypoints;                                                 // 472
                                                                       //
        waypoints = $.extend({}, allWaypoints.vertical, allWaypoints.horizontal);
        return $.each(waypoints, function (key, waypoint) {            // 475
          waypoint[method]();                                          // 476
          return true;                                                 // 477
        });                                                            //
      },                                                               //
      _filter: function (selector, axis, test) {                       // 480
        var context, waypoints;                                        // 481
                                                                       //
        context = contexts[$(selector)[0][contextKey]];                // 483
        if (!context) {                                                // 484
          return [];                                                   // 485
        }                                                              //
        waypoints = [];                                                // 487
        $.each(context.waypoints[axis], function (i, waypoint) {       // 488
          if (test(context, waypoint)) {                               // 489
            return waypoints.push(waypoint);                           // 490
          }                                                            //
        });                                                            //
        waypoints.sort(function (a, b) {                               // 493
          return a.offset - b.offset;                                  // 494
        });                                                            //
        return $.map(waypoints, function (waypoint) {                  // 496
          return waypoint.element;                                     // 497
        });                                                            //
      }                                                                //
    };                                                                 //
    $[wps] = function () {                                             // 501
      var args, method;                                                // 502
                                                                       //
      method = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      if (jQMethods[method]) {                                         // 505
        return jQMethods[method].apply(null, args);                    // 506
      } else {                                                         //
        return jQMethods.aggregate.call(null, method);                 // 508
      }                                                                //
    };                                                                 //
    $[wps].settings = {                                                // 511
      resizeThrottle: 100,                                             // 512
      scrollThrottle: 30                                               // 513
    };                                                                 //
    return $w.load(function () {                                       // 515
      return $[wps]('refresh');                                        // 516
    });                                                                //
  });                                                                  //
}).call(this);                                                         //
/////////////////////////////////////////////////////////////////////////

}).call(this);
