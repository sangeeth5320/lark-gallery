{"metadata":{"modules":{"imports":[],"exports":{"exported":[],"specifiers":[]}},"usedHelpers":[]},"ignored":false,"code":"/*!\n* jquery.counterup.js 1.0\n*\n* Copyright 2013, Benjamin Intal http://gambit.ph @bfintal\n* Released under the GPL v2 License\n*\n* Date: Nov 26, 2013\n*/\n(function ($) {\n    \"use strict\";\n\n    $.fn.counterUp = function (options) {\n\n        // Defaults\n        var settings = $.extend({\n            'time': 400,\n            'delay': 10\n        }, options);\n\n        return this.each(function () {\n\n            // Store the object\n            var $this = $(this);\n            var $settings = settings;\n\n            var counterUpper = function () {\n                var nums = [];\n                var divisions = $settings.time / $settings.delay;\n                var num = $this.text();\n                var isComma = /[0-9]+,[0-9]+/.test(num);\n                num = num.replace(/,/g, '');\n                var isInt = /^[0-9]+$/.test(num);\n                var isFloat = /^[0-9]+\\.[0-9]+$/.test(num);\n                var decimalPlaces = isFloat ? (num.split('.')[1] || []).length : 0;\n\n                // Generate list of incremental numbers to display\n                for (var i = divisions; i >= 1; i--) {\n\n                    // Preserve as int if input was int\n                    var newNum = parseInt(num / divisions * i);\n\n                    // Preserve float if input was float\n                    if (isFloat) {\n                        newNum = parseFloat(num / divisions * i).toFixed(decimalPlaces);\n                    }\n\n                    // Preserve commas if input had commas\n                    if (isComma) {\n                        while (/(\\d+)(\\d{3})/.test(newNum.toString())) {\n                            newNum = newNum.toString().replace(/(\\d+)(\\d{3})/, '$1' + ',' + '$2');\n                        }\n                    }\n\n                    nums.unshift(newNum);\n                }\n\n                $this.data('counterup-nums', nums);\n                $this.text('0');\n\n                // Updates the number until we're done\n                var f = function () {\n                    $this.text($this.data('counterup-nums').shift());\n                    if ($this.data('counterup-nums').length) {\n                        setTimeout($this.data('counterup-func'), $settings.delay);\n                    } else {\n                        delete $this.data('counterup-nums');\n                        $this.data('counterup-nums', null);\n                        $this.data('counterup-func', null);\n                    }\n                };\n                $this.data('counterup-func', f);\n\n                // Start the count up\n                setTimeout($this.data('counterup-func'), $settings.delay);\n            };\n\n            // Perform counts when the element gets into view\n            $this.waypoint(counterUpper, { offset: '100%', triggerOnce: true });\n        });\n    };\n})(jQuery);","ast":null,"map":{"version":3,"sources":["/client/lib/counter/jquery.counterup.js"],"names":[],"mappings":"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","file":"/client/lib/counter/jquery.counterup.js.map","sourcesContent":["/*!\n* jquery.counterup.js 1.0\n*\n* Copyright 2013, Benjamin Intal http://gambit.ph @bfintal\n* Released under the GPL v2 License\n*\n* Date: Nov 26, 2013\n*/\n(function( $ ){\n  \"use strict\";\n\n  $.fn.counterUp = function( options ) {\n\n    // Defaults\n    var settings = $.extend({\n        'time': 400,\n        'delay': 10\n    }, options);\n\n    return this.each(function(){\n\n        // Store the object\n        var $this = $(this);\n        var $settings = settings;\n\n        var counterUpper = function() {\n            var nums = [];\n            var divisions = $settings.time / $settings.delay;\n            var num = $this.text();\n            var isComma = /[0-9]+,[0-9]+/.test(num);\n            num = num.replace(/,/g, '');\n            var isInt = /^[0-9]+$/.test(num);\n            var isFloat = /^[0-9]+\\.[0-9]+$/.test(num);\n            var decimalPlaces = isFloat ? (num.split('.')[1] || []).length : 0;\n\n            // Generate list of incremental numbers to display\n            for (var i = divisions; i >= 1; i--) {\n\n                // Preserve as int if input was int\n                var newNum = parseInt(num / divisions * i);\n\n                // Preserve float if input was float\n                if (isFloat) {\n                    newNum = parseFloat(num / divisions * i).toFixed(decimalPlaces);\n                }\n\n                // Preserve commas if input had commas\n                if (isComma) {\n                    while (/(\\d+)(\\d{3})/.test(newNum.toString())) {\n                        newNum = newNum.toString().replace(/(\\d+)(\\d{3})/, '$1'+','+'$2');\n                    }\n                }\n\n                nums.unshift(newNum);\n            }\n\n            $this.data('counterup-nums', nums);\n            $this.text('0');\n\n            // Updates the number until we're done\n            var f = function() {\n                $this.text($this.data('counterup-nums').shift());\n                if ($this.data('counterup-nums').length) {\n                    setTimeout($this.data('counterup-func'), $settings.delay);\n                } else {\n                    delete $this.data('counterup-nums');\n                    $this.data('counterup-nums', null);\n                    $this.data('counterup-func', null);\n                }\n            };\n            $this.data('counterup-func', f);\n\n            // Start the count up\n            setTimeout($this.data('counterup-func'), $settings.delay);\n        };\n\n        // Perform counts when the element gets into view\n        $this.waypoint(counterUpper, { offset: '100%', triggerOnce: true });\n    });\n\n  };\n\n})( jQuery );"]},"hash":"a50507ed281b1d900b7dd584486374bf88256e5d"}
